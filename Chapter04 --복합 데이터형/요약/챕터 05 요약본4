1.
new와 delete는 서로 다른 함수에서 사용할수있다 하지만 서로 다른 함수에서 사용하는 것은 좋은 생각이 아니다. 
그이유는 delete를 사용하는 일을 잊어버리기 쉽기 떄문이다.

2.
C++에서는 데이터를 저장해 두기 위한 메모리를 대입하는 방법에 따라 "자동공간", "정적공간", "동적공간" 으로
구분한다. "동적공간"은 '힙'(heap)이라고도 부른다. 각각의 메모리 공간에 대입된 데이터 객체는 수명이 서로 다르다.

3.
자동공간: 함수안에 정의되는 보통의 변수들 자동 변수는 "스택"에 저장된다. 스택은 그 값이 순차적으로 저장되고,
역순으로 해제되는 것을 의미한다.

정적공간: 프로그램이 실행되는 동안에 지속적으로 존재하는 공간이다. 변수를 정적으로 만드는 방법은 두가지이다.
하나는 함수 외부에서 변수를 정의하는 것이고, 다른 하나는 변수를 선언할떄 static이라는 키워드를 붙이는 것이다.

동적공간: new와 delete 연산자는 보다 융통성 있는 방법을 제공한다. 이들은 자유 공간(힙) 이라 부르는 메모리 풀
을 관리한다. 이 풀은 자동 변수와 정적 변수가 사용하는 메모리와 분리되어 있다. delete 삭제할떄 까지 계속 존재하게 된다.

4.
new 연산자로 자유 공간(힙)에 변수를 생성한 후 delete로 해제하지 않으면 무슨 일이 벌어질까?
메모리 누수가 발생할수있다. 메모리 누수를 피하려면 new와 delete 연산자를 가능한 가깝게 결합하여 사용하는 습관을
들여야 한다. 즉 자유 공간(힙)에 동적으로 변수나 데이터 객체를 대입하자마자 delete 연산자를 사용할 계획을 서둘러야한다.

5.
vector클래스는 메모리를 관리하기 위해서 new와 delete를 사용하지만, 그 과정은 자동으로 진행된다.
vector형의 객체는 값을 삽입하거나 더할 떄 자동으로 크기를 조정한다.
vector<typeName> vt(n_elem) 매개변수 n_elem은 정수형 상수 또는 정수형 변수가 될수있다.

6.
array클래스는 내재 배열형과 마찬가지로 array 객체는 고정된 크기와 고정 메모리 대입을 사용하여 내재 배열이 지닌 것과
동일한 수준의 효율성을 지닌다.
array<typeName, n_elem> arr   // vector의 경우와는 달리, n_elem은 변수가 될 수 없다.

7.
vector는 힙(heap)  array는 스택(stack)

8.
at() 멤버 함수를 사용하면 범위를 벗어난 접근일 경우 예외가 발생된다.


